{"version":3,"sources":["components/Header.js","components/Game.js","App.js","index.js"],"names":["Header","react_default","a","createElement","className","this","props","status","score","topScore","Component","GameArea","_this","emojis","emoji","map","item","key","id","data-id","onClick","handleClick","src","image","alt","message","App","state","data","messages","componentDidMount","setState","shuffleData","sort","b","Math","random","event","target","dataset","checkGuess","resetData","Object","objectSpread","clicked","correctGuess","newData","parseInt","newScore","max","floor","length","animateCSS","element","animationName","callback","node","document","querySelector","classList","add","addEventListener","handleAnimationEnd","remove","removeEventListener","react","components_Header","Game","animate","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.3e6f574e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row d-flex align-items-center\">\r\n            <div className=\"col-md-3 title\">\r\n              Clicky Emojis\r\n            </div>\r\n            <div className=\"col-md-6 text-center\">\r\n              {this.props.status}\r\n            </div>\r\n            <div className=\"col-md-3 score\">\r\n              Score: {this.props.score} | Top Score: {this.props.topScore}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass GameArea extends Component {\r\n  render() {\r\n    const emojis = this.props.emoji.map((item) =>\r\n      <img className=\"thumb img-thumbnail\"\r\n        key={item.id}\r\n        data-id={item.id}\r\n        onClick={this.props.handleClick}\r\n        src={item.image}\r\n        alt={item.id}\r\n      />\r\n    );\r\n\r\n    return (\r\n      <main className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 text-center\">\r\n            <h1 className=\"h3 mt-4 mt-md-5 mb-4 mb-md-5 message\">{this.props.message}</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"row d-flex justify-content-center\">\r\n          <div className=\"image-container col-12 d-flex justify-content-center\">\r\n            {emojis}\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameArea;","import React, { Component, Fragment } from 'react';\r\nimport Header from './components/Header';\r\nimport GameArea from './components/Game';\r\nimport data from \"./data\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data,\r\n    score: 0,\r\n    topScore: 0,\r\n    status: 'Click an emoji to start',\r\n    message: \"Click as many cats as you can without clicking the same one\"\r\n  }\r\n\r\n  messages = [\r\n    \"Good job keep it up!\",\r\n    \"Great, now keep on clicking!\",\r\n    \"Keep on clicking and set a new high score!\",\r\n    \"Nice, click like there's no tomorrow!\",\r\n    \"You're doing great, now click some more!\"\r\n  ]\r\n\r\n  componentDidMount = () => {\r\n    this.setState({ data: this.shuffleData(this.state.data) });\r\n  }\r\n\r\n  shuffleData = data => {\r\n    let newData = data.sort(function(a, b){return 0.5 - Math.random()});\r\n    return newData;\r\n  };\r\n\r\n  handleClick = event => {\r\n    const id = event.target.dataset.id;\r\n    this.checkGuess(id);\r\n  }\r\n\r\n  resetData = data => {\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    return this.shuffleData(resetData);\r\n  };\r\n\r\n  checkGuess = id => {\r\n    // if the clicked emoji hasn't been clicked set new state\r\n    let correctGuess = false;\r\n    const newData = this.state.data.map(item => {\r\n      // console.log(item.id);\r\n      if (item.id === parseInt(id)) {\r\n        // console.log(item.id);\r\n        // console.log(item.clicked);\r\n        // console.log(id);\r\n        if (!item.clicked) {\r\n          item.clicked = true;\r\n          correctGuess = true;\r\n        }\r\n      }\r\n      return item;\r\n    });\r\n    if (correctGuess) {\r\n      let newScore = this.state.score + 1;\r\n      this.setState(\r\n        {\r\n          data: this.shuffleData(newData),\r\n          score: newScore,\r\n          topScore: Math.max(newScore, this.state.topScore),\r\n          message: this.messages[Math.floor(Math.random()*this.messages.length)]\r\n        }\r\n      )\r\n      this.animateCSS('.message', 'pulse')\r\n    }\r\n    // if the clicked emoji has been clicked, reset game but retain highscore\r\n    else {\r\n      this.animateCSS('main', 'shake')\r\n      this.setState(\r\n        {\r\n          data: this.resetData(newData),\r\n          score: 0,\r\n          message: 'Oopsies, click a cat to try again.'\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  animateCSS = (element, animationName, callback) => {\r\n    const node = document.querySelector(element)\r\n    node.classList.add('animated', animationName)\r\n    let handleAnimationEnd = () => {\r\n      node.classList.remove('animated', animationName)\r\n      node.removeEventListener('animationend', handleAnimationEnd)\r\n      if (typeof callback === 'function') callback()\r\n    }\r\n    node.addEventListener('animationend', handleAnimationEnd)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Header\r\n          status={this.state.status}\r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n        />\r\n        <GameArea\r\n          message={this.state.message}\r\n          emoji={this.state.data}\r\n          animate={this.animateCSS}\r\n          handleClick={this.handleClick}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}